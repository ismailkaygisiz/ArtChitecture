// <auto-generated />

using System;
using DataAccess.Concrete.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

namespace DataAccess.Migrations
{
    [DbContext(typeof(ProjectDbContext))]
    internal class ProjectDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Entities.Concrete.Language", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy",
                        SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("LanguageCode")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("LanguageName")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.ToTable("Languages");
            });

            modelBuilder.Entity("Core.Entities.Concrete.OperationClaim", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy",
                        SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("Name")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.ToTable("OperationClaims");
            });

            modelBuilder.Entity("Core.Entities.Concrete.RefreshToken", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy",
                        SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("ClientId")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("ClientName")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime?>("RefreshTokenEndDate")
                    .HasColumnType("datetime2");

                b.Property<string>("RefreshTokenValue")
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("UserId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("RefreshTokens");
            });

            modelBuilder.Entity("Core.Entities.Concrete.Translate", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy",
                        SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("Key")
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("LanguageId")
                    .HasColumnType("int");

                b.Property<string>("Value")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.HasIndex("LanguageId");

                b.ToTable("Translates");
            });

            modelBuilder.Entity("Core.Entities.Concrete.User", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy",
                        SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("Email")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("FirstName")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("LastName")
                    .HasColumnType("nvarchar(max)");

                b.Property<byte[]>("PasswordHash")
                    .HasColumnType("varbinary(max)");

                b.Property<byte[]>("PasswordSalt")
                    .HasColumnType("varbinary(max)");

                b.Property<bool>("Status")
                    .HasColumnType("bit");

                b.HasKey("Id");

                b.ToTable("Users");
            });

            modelBuilder.Entity("Core.Entities.Concrete.UserOperationClaim", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy",
                        SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<int>("OperationClaimId")
                    .HasColumnType("int");

                b.Property<int>("UserId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("OperationClaimId");

                b.HasIndex("UserId");

                b.ToTable("UserOperationClaims");
            });

            modelBuilder.Entity("Core.Entities.Concrete.RefreshToken", b =>
            {
                b.HasOne("Core.Entities.Concrete.User", "User")
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Core.Entities.Concrete.Translate", b =>
            {
                b.HasOne("Core.Entities.Concrete.Language", "Language")
                    .WithMany()
                    .HasForeignKey("LanguageId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Core.Entities.Concrete.UserOperationClaim", b =>
            {
                b.HasOne("Core.Entities.Concrete.OperationClaim", "OperationClaim")
                    .WithMany()
                    .HasForeignKey("OperationClaimId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Core.Entities.Concrete.User", "User")
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });
#pragma warning restore 612, 618
        }
    }
}